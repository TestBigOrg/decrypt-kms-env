#!/usr/bin/env node

var AWS = require('aws-sdk');
var util = require('util');
var queue = require('d3-queue').queue;

module.exports = decrypt;

function decrypt(env, callback) {
  if (!env.AWS_DEFAULT_REGION) return callback(new Error('AWS_DEFAULT_REGION env var must be set'));
  var kms = new AWS.KMS({
    region: env.AWS_DEFAULT_REGION,
    maxRetries: 10
  });
  var q = queue();
  for (var key in env) {
    if (!(/^secure:/).test(env[key])) continue;
    q.defer(function(key, val, done) {
      kms.decrypt({
        CiphertextBlob: new Buffer(val, 'base64')
      }, function(err, data) {
        if (err) return done(err);
        done(null, { key: key, val: val, decrypted: (new Buffer(data.Plaintext, 'base64')).toString('utf8') });
      });
    }, key, env[key].replace(/^secure:/,''));
  }
  q.awaitAll(function(err, results) {
    if (err) return callback(err);
    var output = '';
    results.forEach(function(data) {
      output += util.format('export %s=%s; ', data.key, data.decrypted);
      output += util.format('echo \'Decrypted %s=************%s\'; ', data.key, data.decrypted.substr(-4));
    });
    callback(null, output);
  });
}

if (!module.parent) {
  process.on('uncaughtException', function(err) {
    console.warn(err.toString());
    console.log('exit 1;');
    process.exit(1);
  });
  decrypt(process.env, function(err, output) {
    if (err) throw err;
    console.log(output);
  });
}

